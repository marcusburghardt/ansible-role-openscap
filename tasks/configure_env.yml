---
- name: "{{ role_name }} | {{ task.name }} | Ensure the base working directory"
  ansible.builtin.file:
    path: "{{ cac_base_dir }}"
    state: directory
    mode: '0750'
  register: result_cac_base_dir

- name: "{{ role_name }} | {{ task.name }} | Check for active repositories of type fork"
  ansible.builtin.debug:
    msg: "It is necessary to ensure the {{ forks_dir }} directory"
  register: active_fork_repos
  when: "(cac_git_repos
    | selectattr('enabled', 'search', 'true')
    | selectattr('type', 'search', 'fork')
    | list )"

- name: "{{ role_name }} | {{ task.name }} | Ensure the {{ forks_dir }} directory"
  ansible.builtin.file:
    path: "{{ forks_dir }}"
    state: directory
    mode: '0750'
  register: result_forks_dir
  when:
    - result_cac_base_dir is success
    - active_fork_repos is not skipped

- name: "{{ role_name }} | {{ task.name }} | Ensure the {{ docs_dir }} directory"
  ansible.builtin.file:
    path: "{{ docs_dir }}"
    state: directory
    mode: '0750'
  register: result_docs_dir
  when:
    - result_cac_base_dir is success

- name: "{{ role_name }} | {{ task.name }} | Check the existence of PATH environment variable"
  ansible.builtin.replace:
    dest: "{{ user_env_file }}"
    regexp: '^export PATH='
    replace: 'export PATH=""'
  check_mode: true
  changed_when: false
  register: result_path_env_check

- name: "{{ role_name }} | {{ task.name }} | Ensure the existence of PATH environment variable"
  ansible.builtin.lineinfile:
    dest: "{{ user_env_file }}"
    state: present
    line: 'export PATH="$PATH"'
  register: result_path_env_ensure
  when:
    - result_path_env_check is not changed

- name: "{{ role_name }} | {{ task.name }} | Ensure PATH environment variable is updated"
  ansible.builtin.lineinfile:
    dest: "{{ user_env_file }}"
    state: present
    backrefs: true
    backup: true
    regexp: 'export PATH=(["]*)((?!.*?{{ item.path }}).*?)(["]*)$'
    line: 'export PATH=\1\2:{{ item.path }}\3'
  loop: "{{ path_env }}"
  when:
    - item.enabled
    - result_path_env_ensure is success or result_path_env_ensure is skipped
...
